-Agregar la fecha y hora de las transacciones. Y tambien, ordenar las transacciones cronologicamente, para que asi el usuario
(especialmente el administrador) pueda tener una vista mas ordenade, con las mas recientes arriba y las mas viejas abajo.

-Cristalizar el cambio de estado de las transacciones (si estan validadas o invalidads, no deberia tener opcion de cambio),
lo mismo que si el estado de entrega es "Si". Obviamente, antes de cambiar estado, preguntar al usuario si esta aseguro y advertirle
al administrador que la decision es irreversible.

-Tambien, si el estado de la transaccion cambia a "invalidado", entonces se debe actualizar la cantidad de productos en la base 
de datos, ya que no se entregaran al cliente y el stock no sera alterado.

-Falta la verificacion por correo electronico de clientes. Usando 
nodemailer y una cuenta de correo del negocio (como outlook?) o usar un servicio como sendgrid. Realmente hago esto
asi debido a la funcionalidad de recuperacion de contrase単a, ya que enviarla via correo al usuario es el estandar.
Pero... aun asi, podria implementar otro metodo, algo asi como preguntas aleatorias de seguridad, etc.

-Agregar configuracion de la cuenta (tanto para el administrador como para el cliente). El administrador podra cambiar su nombre
de usuario y contrase単a. El cliente su correo y contrase単a.

En la funcionalidad de inventario, al momento de agregar el producto, el input de la foto/input file no cambia, es decir,
no se resetea. A pesar de que no es nada de lo que deba preocuparme, me gustaria solucionar esto.

-Mejorar estetica y presentacion.

-Posiblemente usar una libreria como croppie para forzar al administrador a recortar la foto para que sea de un tama単o estandar

-Mejorar el manejo de errores.

-Aplicar winston para el log de errores

-Testear la aplicacion (unitario e integral)

-Usar redis para el almacenamiento en cache y aumentar el rendimiento de la aplicacion.

-Usar nginx

-Usar pm2 (o forever?) para ejecutar la aplicacion en el servidor, si el proceso jamas se parara incluso si hay errores

-Test de rendimiento

-Aplicar ajustes de seguridad (https, firewall, ssh seguro, kerdel hardening, helmetjs, etc)

-Test de seguridad (pentesting)



